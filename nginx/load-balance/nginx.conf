# Global Settings (전역 설정)
user nginx; # nginx 사용자로 실행됨
worker_processes 1; # nginx가 하나의 워커 프로세스를 사용하도록 설정. 워커 프로세스는 클라이언트의 요청을 처리하도록 함

# Events Block (이벤트 블록)
events {
    worker_connections 1024; # 각 워커프로세스가 동시에 처리할 수 있는 최대 연결수를 1024로 설정한다. 동시에 1024개의 클라이언트 연결을 처리할 수 있다.
}

# HTTP Block(HTTP 블록)
http {
    # log_format custom: NGINX의 로그 형식을 정의합니다.
    log_format custom '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      'upstream: $upstream_addr';
                      
    # $remote_addr: 클라이언트 IP 주소
    # $remote_user: 인증된 사용자 (없으면 -)
    # $time_local: 요청이 처리된 시간
    # $request: 요청된 HTTP 메서드와 경로
    # $status: HTTP 응답 상태 코드 (예: 200, 404)
    # $body_bytes_sent: 전송된 응답 바이트 수
    # $http_referer: 참조 페이지 (어디서 왔는지)
    # $http_user_agent: 클라이언트의 User-Agent 정보 (브라우저 정보 등)
    # $http_x_forwarded_for: 프록시를 거친 클라이언트 IP 주소
    # $upstream_addr: 백엔드 서버 주소 (로드밸런싱에서 중요한 역할)

    access_log /var/log/nginx/access.log custom; # 로그를 /var/log/nginx/access.log 경로에 custom 형식으로 기록합니다.

    # Upstream Block(백엔드 서버 그룹 설정)
    upstream backend_servers {
        server backend1:80;
        server backend2:80;
    }

    # Server Block(서버 블록)
    server {
        listen 80; # NGINX 포트가 80 에서 들어오는 요청을 수신하도록 설정

        location / { # 루트 경로(/)로 들어오는 모든 요청을 처리하는 블록
            proxy_pass http://backend_servers;
            proxy_set_header Host $host; # 원래 클라이언트의 호스트 헤더를 유지하여 백엔드로 전달
            proxy_set_header X-Real-IP $remote_addr; # 클라이언트의 실제 IP를 백엔드로 전달
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 프록시를 거친 클라이언트 IP주소를 전달
            proxy_set_header X-Forwarded-Proto $scheme; # 원래 요청이 HTTP 또는 HTTPS인지 대한 정보를 전달
        }
    }
}